{{- if $.Values.grafana.deploy -}}
# Source: grafana/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    helm.sh/chart: grafana-6.32.3
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: grafana-release
    app.kubernetes.io/managed-by: Helm
  name: grafana-release
  namespace: {{ $.Release.Namespace }}
---
# Source: grafana/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: grafana-release
  namespace: {{ $.Release.Namespace }}
  labels:
    helm.sh/chart: grafana-6.32.3
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: grafana-release
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  admin-user: "YWRtaW4="
  admin-password: "YWRtaW4="
  ldap-toml: ""
---
# Source: grafana/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-release
  namespace: {{ $.Release.Namespace }}
  labels:
    helm.sh/chart: grafana-6.32.3
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: grafana-release
    app.kubernetes.io/managed-by: Helm
data:
  grafana.ini: |
    [analytics]
    check_for_updates = true
    [grafana_net]
    url = https://grafana.net
    [log]
    mode = console
    [paths]
    data = /var/lib/grafana/
    logs = /var/log/grafana
    plugins = /var/lib/grafana/plugins
    provisioning = /etc/grafana/provisioning
---
# Source: grafana/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasource-provision
  namespace: {{ $.Release.Namespace }}
  labels:
    helm.sh/chart: grafana-6.32.3
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: grafana-release
    app.kubernetes.io/managed-by: Helm
data:
  datasources.yaml: |
    apiVersion: 1
    datasources:
      - id: 1
        name: primihub-loki
        type: loki
        access: proxy
        url: http://distribute-loki-distributed-gateway.{{ $.Release.Namespace }}
        readOnly: false
        jsonData:
          maxLines: 1000
---
# Source: grafana/templates/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-release
  namespace: {{ $.Release.Namespace }}
  labels:
    helm.sh/chart: grafana-6.32.3
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: grafana-release
    app.kubernetes.io/managed-by: Helm
  finalizers:
    - kubernetes.io/pvc-protection
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "10Gi"
  storageClassName: managed-nfs-storage
---
# Source: grafana/templates/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    helm.sh/chart: grafana-6.32.3
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: grafana-release
    app.kubernetes.io/managed-by: Helm
  name: grafana-release-clusterrole
rules: []
---
# Source: grafana/templates/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: grafana-release-clusterrolebinding
  labels:
    helm.sh/chart: grafana-6.32.3
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: grafana-release
    app.kubernetes.io/managed-by: Helm
subjects:
  - kind: ServiceAccount
    name: grafana-release
    namespace: {{ $.Release.Namespace }}
roleRef:
  kind: ClusterRole
  name: grafana-release-clusterrole
  apiGroup: rbac.authorization.k8s.io
---
# Source: grafana/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: grafana-release
  namespace: {{ $.Release.Namespace }}
  labels:
    helm.sh/chart: grafana-6.32.3
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: grafana-release
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:      ['extensions']
  resources:      ['podsecuritypolicies']
  verbs:          ['use']
  resourceNames:  [grafana-release]
---
# Source: grafana/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: grafana-release
  namespace: {{ $.Release.Namespace }}
  labels:
    helm.sh/chart: grafana-6.32.3
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: grafana-release
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: grafana-release
subjects:
- kind: ServiceAccount
  name: grafana-release
  namespace: {{ $.Release.Namespace }}
---
# Source: grafana/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: grafana-release
  namespace: {{ $.Release.Namespace }}
  labels:
    helm.sh/chart: grafana-6.32.3
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: grafana-release
    app.kubernetes.io/managed-by: Helm
spec:
  type: NodePort
  ports:
    - name: service
      port: 3000
      protocol: TCP
      targetPort: 3000
      nodePort: {{ .Values.grafana.nodeport }}

  selector:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: grafana-release
---
# Source: grafana/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana-release
  namespace: {{ $.Release.Namespace }}
  labels:
    helm.sh/chart: grafana-6.32.3
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: grafana-release
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana
      app.kubernetes.io/instance: grafana-release
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana
        app.kubernetes.io/instance: grafana-release
      annotations:
        checksum/config: 07605270a7858be1b2b94e7eb50f2095412b327a1445f65784fe26a82d859df6
        checksum/dashboards-json-config: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        checksum/sc-dashboard-provider-config: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        checksum/secret: a8193013386d65f58fc8223a07919c52dc8f767b7a3781712ceac15d5d7f2549
    spec:
      
      serviceAccountName: grafana-release
      automountServiceAccountToken: true
      securityContext:
        fsGroup: 472
        runAsGroup: 472
        runAsUser: 472
      initContainers:
        - name: init-chown-data
          image: "busybox:1.31.1"
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsNonRoot: false
            runAsUser: 0
          command: ["chown", "-R", "472:472", "/var/lib/grafana"]
          resources:
            {}
          volumeMounts:
            - name: storage
              mountPath: "/var/lib/grafana"
      enableServiceLinks: true
      containers:
        - name: grafana
          image: "grafana/grafana:8.0.6"
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: config
              mountPath: "/etc/grafana/grafana.ini"
              subPath: grafana.ini
            - name: storage
              mountPath: "/var/lib/grafana"
            - name: provision
              mountPath: /etc/grafana/provisioning/datasources/datasources.yaml
              subPath: datasources.yaml
          ports:
            - name: grafana
              containerPort: 3000
              protocol: TCP
          env:
            - name: GF_SECURITY_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: grafana-release
                  key: admin-user
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana-release
                  key: admin-password
            - name: GF_PATHS_DATA
              value: /var/lib/grafana/
            - name: GF_PATHS_LOGS
              value: /var/log/grafana
            - name: GF_PATHS_PLUGINS
              value: /var/lib/grafana/plugins
            - name: GF_PATHS_PROVISIONING
              value: /etc/grafana/provisioning
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 60
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /api/health
              port: 3000
          resources:
            {}
      volumes:
        - name: config
          configMap:
            name: grafana-release
        - name: provision
          configMap:
            name: grafana-datasource-provision
        - name: storage
          persistentVolumeClaim:
            claimName: grafana-release
        


{{- end -}}